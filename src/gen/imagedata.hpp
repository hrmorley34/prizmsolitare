#include "../imageclasses.hpp"
#include "../card.hpp"

#ifndef GEN_IMAGEDATA_H
#define GEN_IMAGEDATA_H

#pragma region IMAGEDATA

const Palette PaletteTB = (const Palette){(const color_t[]){0, 0x0000}, 1, 8, 0b1, 0};
const Palette PaletteTR = (const Palette){(const color_t[]){0, 0xf800}, 1, 8, 0b1, 0};

const Palette CardBGPalette = {(const color_t[]){0, 0x4208, 0xc618, 0xffff}, 2, 4, 0b11, 0};
const Image CardBG = {(const unsigned char[]){0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x50, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00}, &CardBGPalette, 36, 49};

const Palette CardBackPalette = {(const color_t[]){0, 0x0010, 0x0018, 0x39ff, 0xc61f}, 3, 2, 0b111, 0};
const Image CardBack = {(const unsigned char[]){0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x90, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x90, 0x00, 0x10, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x80, 0x10, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x80, 0x88, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x50, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x28, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x44, 0x04, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x20, 0x04, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x20, 0x00, 0x24, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x24, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00}, &CardBackPalette, 36, 49};

const Palette CardShinePalette = {(const color_t[]){0, 0xffe0}, 1, 8, 0b1, 0};
const Image CardShine = {(const unsigned char[]){0x03, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x3c, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xc0}, &CardShinePalette, 40, 53};

const Image SuitImages[4] = {
    {(const unsigned char[]){0x00, 0x66, 0xff, 0xff, 0xff, 0x7e, 0x3c, 0x18}, &PaletteTR, 8, 8},
    {(const unsigned char[]){0x18, 0x3c, 0x3c, 0x7e, 0x7e, 0x3c, 0x3c, 0x18}, &PaletteTR, 8, 8},
    {(const unsigned char[]){0x18, 0x3c, 0x3c, 0x7e, 0x7e, 0x7e, 0x5a, 0x18}, &PaletteTB, 8, 8},
    {(const unsigned char[]){0x18, 0x3c, 0x5a, 0xff, 0xff, 0x5a, 0x18, 0x18}, &PaletteTB, 8, 8},
};

const unsigned char *const NumImagesData_1 = (const unsigned char[]){0x60, 0x90, 0x90, 0xf0, 0x90, 0x90, 0x90};
const unsigned char *const NumImagesData_2 = (const unsigned char[]){0x60, 0x90, 0x10, 0x20, 0x40, 0x80, 0xf0};
const unsigned char *const NumImagesData_3 = (const unsigned char[]){0x60, 0x90, 0x10, 0x20, 0x10, 0x90, 0x60};
const unsigned char *const NumImagesData_4 = (const unsigned char[]){0x20, 0x60, 0xa0, 0xf0, 0x20, 0x20, 0x20};
const unsigned char *const NumImagesData_5 = (const unsigned char[]){0xf0, 0x80, 0x80, 0xe0, 0x10, 0x10, 0xe0};
const unsigned char *const NumImagesData_6 = (const unsigned char[]){0x60, 0x90, 0x80, 0xe0, 0x90, 0x90, 0x60};
const unsigned char *const NumImagesData_7 = (const unsigned char[]){0xf0, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40};
const unsigned char *const NumImagesData_8 = (const unsigned char[]){0x60, 0x90, 0x90, 0x60, 0x90, 0x90, 0x60};
const unsigned char *const NumImagesData_9 = (const unsigned char[]){0x60, 0x90, 0x90, 0x70, 0x10, 0x10, 0x10};
const unsigned char *const NumImagesData_10 = (const unsigned char[]){0x98, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0x98};
const unsigned char *const NumImagesData_11 = (const unsigned char[]){0xf0, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60};
const unsigned char *const NumImagesData_12 = (const unsigned char[]){0x60, 0x90, 0x90, 0x90, 0x90, 0xa0, 0x50};
const unsigned char *const NumImagesData_13 = (const unsigned char[]){0x90, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x90};

const Image NumbersImages[2][14] = {
    {
        {},
        {NumImagesData_1, &PaletteTR, 4, 7},
        {NumImagesData_2, &PaletteTR, 4, 7},
        {NumImagesData_3, &PaletteTR, 4, 7},
        {NumImagesData_4, &PaletteTR, 4, 7},
        {NumImagesData_5, &PaletteTR, 4, 7},
        {NumImagesData_6, &PaletteTR, 4, 7},
        {NumImagesData_7, &PaletteTR, 4, 7},
        {NumImagesData_8, &PaletteTR, 4, 7},
        {NumImagesData_9, &PaletteTR, 4, 7},
        {NumImagesData_10, &PaletteTR, 6, 7},
        {NumImagesData_11, &PaletteTR, 4, 7},
        {NumImagesData_12, &PaletteTR, 4, 7},
        {NumImagesData_13, &PaletteTR, 4, 7},
    },
    {
        {},
        {NumImagesData_1, &PaletteTB, 4, 7},
        {NumImagesData_2, &PaletteTB, 4, 7},
        {NumImagesData_3, &PaletteTB, 4, 7},
        {NumImagesData_4, &PaletteTB, 4, 7},
        {NumImagesData_5, &PaletteTB, 4, 7},
        {NumImagesData_6, &PaletteTB, 4, 7},
        {NumImagesData_7, &PaletteTB, 4, 7},
        {NumImagesData_8, &PaletteTB, 4, 7},
        {NumImagesData_9, &PaletteTB, 4, 7},
        {NumImagesData_10, &PaletteTB, 6, 7},
        {NumImagesData_11, &PaletteTB, 4, 7},
        {NumImagesData_12, &PaletteTB, 4, 7},
        {NumImagesData_13, &PaletteTB, 4, 7},
    },
};

const Palette NumImagePalette_a = {(const color_t[]){0, 0x0010, 0x0018, 0x39ff, 0xc61f}, 3, 2, 0b111, 0};

const Image NumImage_11 = {(const unsigned char[]){0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x90, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x90, 0x00, 0x10, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x80, 0x10, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x80, 0x88, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x50, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x48, 0x48, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x28, 0x4c, 0x6c, 0x48, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x48, 0x6c, 0x68, 0x44, 0x04, 0x4c, 0x48, 0x48, 0x68, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x4c, 0x48, 0x48, 0x68, 0x20, 0x04, 0x48, 0x48, 0x6c, 0x68, 0x4c, 0x68, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x68, 0x4c, 0x6c, 0x48, 0x48, 0x20, 0x00, 0x24, 0x6c, 0x6c, 0x68, 0x4c, 0x6c, 0x68, 0x48, 0x48, 0x4c, 0x6c, 0x68, 0x4c, 0x6c, 0x6c, 0x24, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00}, &NumImagePalette_a, 36, 49};

void DrawCard(Card card, int x, int y)
{
    CardBG.CopySprite(x, y);
    if (!card.NonNull())
        return;
    const Image *number = &NumbersImages[card.GetColour()][card.GetRank()];
    number->CopySprite(x + 2, y + 2, false);
    number->CopySprite(x + 33, y + 45, true);
    const Image *const suit = &SuitImages[card.GetSuit()];
    switch (card.GetRank())
    {
    case 1:
        suit->CopySprite(x + 14, y + 20, false);
        return;
    case 2:
        suit->CopySprite(x + 14, y + 6, false);
        suit->CopySprite(x + 21, y + 41, true);
        return;
    case 3:
        suit->CopySprite(x + 14, y + 6, false);
        suit->CopySprite(x + 14, y + 20, false);
        suit->CopySprite(x + 21, y + 41, true);
        return;
    case 4:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 5:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 14, y + 20, false);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 6:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 7, y + 20, false);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 21, y + 20, false);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 7:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 7, y + 20, false);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 14, y + 14, false);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 21, y + 20, false);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 8:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 7, y + 20, false);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 14, y + 14, false);
        suit->CopySprite(x + 21, y + 33, true);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 21, y + 20, false);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 9:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 7, y + 16, false);
        suit->CopySprite(x + 14, y + 31, true);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 14, y + 20, false);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 21, y + 16, false);
        suit->CopySprite(x + 28, y + 31, true);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    case 10:
        suit->CopySprite(x + 7, y + 8, false);
        suit->CopySprite(x + 7, y + 16, false);
        suit->CopySprite(x + 14, y + 31, true);
        suit->CopySprite(x + 14, y + 39, true);
        suit->CopySprite(x + 14, y + 12, false);
        suit->CopySprite(x + 21, y + 35, true);
        suit->CopySprite(x + 21, y + 8, false);
        suit->CopySprite(x + 21, y + 16, false);
        suit->CopySprite(x + 28, y + 31, true);
        suit->CopySprite(x + 28, y + 39, true);
        return;
    }
}

void DrawCardBack(int x, int y)
{
    CardBack.CopySprite(x, y);
}

void DrawCardShine(int x, int y)
{
    CardShine.CopySprite(x + -2, y + -2);
}

const color_t BackgroundColour = 0x0600;

#pragma endregion IMAGEDATA

void DrawBackground(int miny, int yrange, int minx, int xrange)
{
    color_t *v = VRAM + miny * LCD_WIDTH_PX + minx;
    for (int y = 0; y < yrange; y++)
    {
        for (int x = 0; x < xrange; x++)
        {
            *v = BackgroundColour;
            v++;
        }
        v += LCD_WIDTH_PX - xrange;
    }
}

#endif
